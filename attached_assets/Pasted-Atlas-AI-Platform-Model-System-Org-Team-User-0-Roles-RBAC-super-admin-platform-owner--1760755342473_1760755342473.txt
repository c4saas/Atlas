Atlas AI — Platform Model (System → Org → Team → User)
0) Roles (RBAC)
super_admin — platform owner. Manages System scope and can view/override any org.


admin — org admin. Manages Org & its Teams/Users.


user — member of an org/team. Can use features allowed by the plan.


RBAC controls who can configure; plan controls what is available to users.

1) Scopes & Precedence
System (platform-wide defaults) → owned by super_admin.


Org (workspace/tenant) → owned by admin.


Team (subgroup within an org) → owned by team owner/admin.


User (individual) → self settings only.


Precedence on evaluation:
System defaults  → narrowed by Org  → narrowed by Team  → applied to User
(Users cannot widen beyond Team/Org/Plan.)

2) Plans & Features (source of truth)
2.1 Plan Schema
Each plan (e.g., Free, Pro, Enterprise) has:
Plan {
  id: string
  name: "Free" | "Pro" | "Enterprise" | string
  description: string
  // Feature flags (usage allowed?)
  allow_experts: boolean
  allow_templates: boolean
  allow_models: boolean            // can select non-default models
  allow_kb_system: boolean         // inherits System KB
  allow_kb_org: boolean
  allow_kb_team: boolean
  allow_kb_user: boolean
  allow_memory: boolean
  allow_agents: boolean
  allow_api_access: boolean
  // Optional upsell UX for disallowed features
  show_experts_upsell: boolean
  show_templates_upsell: boolean
  show_api_upsell: boolean
  // Token/usage
  daily_message_limit?: number | null
  max_file_size_mb?: number
  storage_quota_gb?: number
  // Model access (allowlists at plan level)
  models_allowed: string[]         // model IDs permissible for this plan
  // Optional per-plan allowlists for content libraries
  experts_allowed: string[]        // expert IDs user can see/use on this plan
  templates_allowed: string[]      // template IDs user can see/use on this plan
  // Billing metadata (display only)
  price_monthly_usd?: number
  price_annual_usd?: number
  is_active: boolean
  updated_at: timestamp
}
Defaults you asked for:
Free: allow_experts=false, allow_templates=false, show_*_upsell=true


Pro: allow_experts=true, allow_templates=true, show_*_upsell (ignored)


Admin/Super Admin may edit plans in Admin → Plans & Models.
2.2 Org Overrides (Narrow Only)
An org can narrow a plan (hide items), never widen it:
OrgPlanOverride {
  org_id: string
  plan_id: string
  // Narrowers (optional)
  disable_experts?: boolean
  disable_templates?: boolean
  disable_models?: boolean
  // Narrowed allowlists (subset of the plan lists)
  experts_allowed?: string[]   // ≤ plan.experts_allowed
  templates_allowed?: string[] // ≤ plan.templates_allowed
  models_allowed?: string[]    // ≤ plan.models_allowed
  // Feature visibility preferences (upsell on/off)
  show_experts_upsell?: boolean
  show_templates_upsell?: boolean
  show_api_upsell?: boolean
  updated_at: timestamp
}
2.3 Team Pins (Convenience, not permission)
Teams can pin shortcuts (subset of org/plan):
TeamPins {
  team_id: string
  experts_pinned: string[]      // subset of effective experts_allowed
  templates_pinned: string[]
}

3) Knowledge Base & Memory (all four levels)
3.1 KB Entities (shared structure)
KnowledgeAsset {
  id: string
  scope: "system" | "org" | "team" | "user"
  owner_id: string             // system_id | org_id | team_id | user_id
  title: string
  source_type: "file" | "url" | "text"
  source_url?: string
  file_ref?: string            // storage key
  text_body?: string
  metadata?: JSON
  embedding?: vector
  chunk_metadata?: JSON
  created_by: user_id | system
  created_at: timestamp
  updated_at: timestamp
  is_active: boolean
}
3.2 Inheritance & Gating
Effective KB for a user =

 System KB (if plan.allow_kb_system) + Org KB (if plan.allow_kb_org) + Team KB (if plan.allow_kb_team) + User KB (if plan.allow_kb_user)


Org may disable specific KB layers (narrowing).


Team sees: System/Org + Team; users also see their Personal KB if allowed.


Memory (long-term user persona/chat history summarization) is controlled by allow_memory at plan level; org may turn it off.



4) Models & Tool Policies
4.1 Model Catalog (System)
Model {
  id: string                     // e.g., "groq/llama-3-70b"
  provider: "groq" | "openai" | "anthropic" | ...
  display_name: string
  capabilities: { code?: boolean, web?: boolean, vision?: boolean, audio?: boolean }
  base_pricing: { input_per_1k_usd: number, output_per_1k_usd: number }
  is_active: boolean
}
4.2 Tool Policies & Safety Notes (System)
Rename section to Tool Policies & Safety Notes.


Stores global rules like: when to use web/code, max tool calls, disallowed domains, safety reminders.


Read-only for org admins; configurable by super_admin.


4.3 Effective Model Access
From Plan.models_allowed ∩ OrgOverride.models_allowed (if provided).


Composer model dropdown shows effective models.


Server enforces: reject disallowed model with 403 "Model not available on your plan".



5) Experts & Templates (plan-gated)
5.1 Libraries
System Library (super_admin authoring): all Experts & Templates live here.


Org Allowlist: subset of the System Library the org exposes to its users (further subset of Plan allowlists).


Team Pins: quick access subset of the Org Allowlist.


Expert {
  id: string
  name: string
  description: string
  prompt: string
  status: "active" | "draft" | "archived"
  created_by: user_id | system
  updated_at: timestamp
}

Template {
  id: string
  name: string
  description: string
  schema: JSON          // headings/sections; or JSON-schema for structured output
  status: "active" | "draft" | "archived"
  created_by: user_id | system
  updated_at: timestamp
}
5.2 Usage Rules
Visibility & usage determined by plan, not by role:


If plan.allow_experts → user can Choose Expert (limited to effective allowlist).


If plan.allow_templates → user can Choose Template (limited to effective allowlist).


Org may narrow by allowlists; Team only pins.


Composer “+” menu logic:


Show Choose Expert/Template only if allowed by effective capabilities.


If disallowed but show_*_upsell=true → show disabled item with CTA “Upgrade to Pro…”.


Otherwise, hide.


Chips behavior:


Expert: {name} → one active per conversation; persists until cleared.


Template: {name} → applies to next message only; clears after send.


Server enforcement:


Block apply/select if disallowed (403 “Your current plan doesn’t include this feature.”).



6) Effective Capabilities (single payload for the UI)
6.1 API
GET /api/effective-capabilities → returns a single object the client uses everywhere.
Request context: deduce from session (user_id, org_id, team_id).
Response example:
{
  "plan": { "id":"pro", "name":"Pro" },
  "limits": {
    "daily_message_limit": null,
    "max_file_size_mb": 1024,
    "storage_quota_gb": 2
  },
  "features": {
    "experts": { "allowed": true,  "upsell": false },
    "templates": { "allowed": true, "upsell": false },
    "models": { "allowed": true },
    "kb": {
      "system": true,
      "org": true,
      "team": true,
      "user": true
    },
    "memory": true,
    "agents": true,
    "api_access": { "allowed": true, "upsell": false }
  },
  "allowlists": {
    "experts": ["exp_sales", "exp_marketing"],
    "templates": ["tpl_exec_brief", "tpl_how_to"],
    "models": ["groq/llama-3-70b", "groq/llama-3-8b"]
  },
  "pins": {
    "experts": ["exp_sales"],
    "templates": ["tpl_exec_brief"]
  }
}
Frontend rule: Always drive composer menus, settings cards, model dropdown, and upsells from this object only (no local heuristics).

7) Knowledge & Memory UI rules
Settings → Account/Subscription: Render plan features from effective-capabilities.features (no hardcoded copy).


Project/Team Settings: When editing KB, enforce scope & plan:


If kb.team=false, hide team KB controls.


If kb.user=false, hide personal KB upload.


Memory toggle: Visible only when features.memory=true.



8) Persistence & Enforcement (backend)
When saving Plan or Org overrides, invalidate caches used by /api/effective-capabilities.


Server-side guards on:


Set/clear Expert on a conversation → require features.experts.allowed.


Apply Template to a message → require features.templates.allowed.


Select Model → require model in allowlists.models.


Access API → require features.api_access.allowed.


Read/Write KB at scope → require corresponding features.kb.[scope].


On downgrade:


Stop applying Expert/Template on the next request (don’t delete historical data).


If current model isn’t allowed, switch to default model and show a one-time notification.



9) Admin Dashboard IA (final)
System & Policies (Super Admin)
System Prompts


Output Templates (Global Library)


Tool Policies & Safety Notes  (renamed)


Model Catalog & Pricing


Release Management


Platform Settings


Organizations & Plans (Super Admin + Org Admin where relevant)
Plans & Models (edit plan flags & allowlists)


Org Settings (assign plan; narrow features; KB policies; billing/quotas)


User Management (invite/roles; Change Plan for user if supported)


Access Codes (optional)


Teams
Teams (create/manage; pin Experts/Templates; Team KB)


AI Agents
Manage Agents (webhook URL, test)


Expert Library (org view; toggle visibility from global)


Access & Integrations
API Access


Audit & Analytics



10) Frontend Wiring (key spots)
Composer “+” menu


Items: Add files (always), Choose Expert (if features.experts.allowed), Choose Template (if features.templates.allowed).


If not allowed and upsell enabled → show disabled item with CTA.


Model dropdown


Populate from allowlists.models.


Hide capability notes in thread; show inside model dropdown only.


Settings → Subscription Plan


Render from effective-capabilities.features and limits (no divergent copy from Admin).



11) Analytics & Auditing (minimum)
Record every gated denial as event:


feature_blocked {
  user_id, org_id, team_id, feature: "experts"|"templates"|"api_access"|"model",
  context: "composer_menu"|"apply_template"|"set_expert"|"select_model",
  ts
}
Show counts in Admin Analytics to inform upgrades.


Audit log for plan/override changes:


plan_change_audit {
  actor_user_id, scope: "system"|"org", target_id,
  before: JSON, after: JSON, reason?: string, ts
}

12) Acceptance Criteria (business)
Admin Plan changes persist and immediately affect /api/effective-capabilities, user Settings, composer menus, and server enforcement.


Experts/Templates are plan-gated and narrowed by org allowlists; Team pins only affect shortcuts.


Knowledge Base layers respect plan flags (system/org/team/user) and enforce at upload/use time.


Model selection is restricted to effective models; disallowed model use is blocked.


Memory toggle appears only when allowed; off means no personalization context injected.


The section is renamed Tool Policies & Safety Notes in the Admin sidebar.


No “something is wrong” placeholders; real errors show friendly messages and logs.


After downgrade, Expert/Template no longer apply; model auto-downgrades to default if needed; one-time notice shown.



13) Quick API Checklist (implement these)
GET /api/effective-capabilities  ← single source of truth for client


GET/POST/PATCH /api/admin/plans  ← plan flags + allowlists


GET/POST/PATCH /api/admin/org-overrides  ← narrowers + allowlists


GET/POST/PATCH /api/system/experts|templates  ← global libraries (super_admin)


GET/POST /api/org/experts-allowlist|templates-allowlist  ← select subset


GET/POST /api/team/pins


Guards in chat routes: set expert, apply template, select model, kb read/write, api access




